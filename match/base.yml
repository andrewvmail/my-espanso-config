matches:
  - trigger: ":espanso"
    replace: "Hi there!"

  - trigger: ":date"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%m/%d/%Y"

  - trigger: ":shell"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "echo 'Hello from your shell'"

  - trigger: ":action"
    replace: "export const someAction = async ({ state, effects, actions }: Context) => { };"

  - trigger: ":ormGet"
    replace: |
      export const ormGet = async ({ state, effects, actions }: Context) => {
        const array = await effects.orm
          .getRepository()
          .createQueryBuilder("")
          .getMany();

        console.log("ormArray");
        console.log(array);
      };

  - trigger: ":page"
    replace: |
      import React from "react";
      import { useActions, useAppState } from "../overmind";

      const Page = () => {
        return (
          <>
          </>
        );
      };
      export default Page;

  - trigger: ":form"
    replace: |
      import React from "react";
      import { useActions, useAppState } from "../overmind";
      import { SubmitHandler, useForm } from "react-hook-form";

      type SomeFormInputs = {
        email: string;
        password: string;
      };

      const SomeFormPage = () => {

        const { login } = useActions().register;
        const {
          register,
          handleSubmit,
          watch,
          formState: { errors },
        } = useForm<SomeFormInputs>();
        const onSubmit: SubmitHandler<SomeFormInputs> = ({ email, password }) => {
          login({ email, password });
        };
        return (
          <>
            <form onSubmit={handleSubmit(onSubmit)}>
              <label>
                Email
                <input {...register("email", { required: true })} />
              </label>
              {errors.email && <span>This field is required</span>}
              <br />
              <label>
                Password
                <input
                  type="password"
                  {...register("password", { required: true })}
                />
              </label>
              {errors.password && <span>This field is required</span>}
              <br />
              <input type="submit" />
            </form>
          </>
        );
      };
      export default SomeFormPage;


