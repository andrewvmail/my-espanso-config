matches:
  - trigger: ":ipw"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "ipconfig | findstr /i \"ipv4\" | awk '{print $14}' | head -1"

  - trigger: ":ddd"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%d-%m-%Y"

  - trigger: ":date"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%d-%m-%Y"

  - trigger: ":shell"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "echo 'Hello from your shell'"

  - trigger: ":action"
    replace: "export const someAction = async ({ state, effects, actions }: Context) => { };"

  - trigger: ":ormGet"
    replace: |
      export const ormGet = async ({ state, effects, actions }: Context) => {
        const array = await effects.orm
          .getRepository()
          .createQueryBuilder("")
          .getMany();

        console.log("ormArray");
        console.log(array);
      };

  - trigger: ":page"
    replace: |
      import React from "react";
      import { useActions, useAppState } from "../overmind";

      const Page = () => {
        return (
          <>
          </>
        );
      };
      export default Page;

  - trigger: ":form"
    replace: |
      import React from "react";
      import { useActions, useAppState } from "../overmind";
      import { SubmitHandler, useForm } from "react-hook-form";

      type SomeFormInputs = {
        email: string;
        password: string;
      };

      const SomeFormPage = () => {

        const { login } = useActions().register;
        const {
          register,
          handleSubmit,
          watch,
          formState: { errors },
        } = useForm<SomeFormInputs>();
        const onSubmit: SubmitHandler<SomeFormInputs> = ({ email, password }) => {
          login({ email, password });
        };
        return (
          <>
            <form onSubmit={handleSubmit(onSubmit)}>
              <label>
                Email
                <input {...register("email", { required: true })} />
              </label>
              {errors.email && <span>This field is required</span>}
              <br />
              <label>
                Password
                <input
                  type="password"
                  {...register("password", { required: true })}
                />
              </label>
              {errors.password && <span>This field is required</span>}
              <br />
              <input type="submit" />
            </form>
          </>
        );
      };
      export default SomeFormPage;

  - trigger: ":mark"
    replace: |
      console.log("ðŸ›‘");
      console.log() 
      console.log("ðŸ›‘");

  - trigger: ":effect"
    replace: |
      React.useEffect(() => {}, []);

  - trigger: ":afile"
    replace: |
      import { Overmind, debounce, pipe, rehydrate } from "overmind"; import { Context } from "../.."; export const someAction = async ({ state, effects, actions }: Context) => {};

  - trigger: ":sfile"
    replace: |
      type State = {}; export const state: State = {};

  - trigger: ":ifile"
    replace: |
      import * as actions from "./actions"; import { state } from "./state"; export { state, actions };

  - trigger: ":lorem"
    replace: |
      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut molestie tempus mi vel venenatis. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Phasellus molestie fringilla elit, sed feugiat velit feugiat non. Mauris sit amet viverra dui. In eleifend tellus arcu, non ullamcorper est dignissim nec. Nulla accumsan scelerisque blandit. Sed dolor nunc, tempus at maximus sit amet, posuere vitae sem. Proin mi elit, interdum rhoncus lacinia porta, accumsan non ipsum. Donec ac lorem ut lorem sagittis euismod quis vel purus.

  - trigger: ":try"
    replace: |
      try { } catch (e) { }

  - trigger: ":onc"
    replace: |
      onClick={() => {}}

  - trigger: ":toolbox"
    replace: |
      docker run -it --name toolbox -v /:/media/root --ipc=host --net=host --pid=host chriswayg/toolbox

  - trigger: "__filename"
    replace: |
      `[ ${__filename} ]`